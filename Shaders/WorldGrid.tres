[gd_resource type="Shader" format=2]

[resource]
code = "/**
 * World Grid
 * Version 1.0.0.0
 * Copyright (c) 2020, Silc Renew / Tokage IT Lab.
 * All rights reserved.
 */
shader_type spatial;

uniform float grid_step: hint_range(0.1, 10.0) = 1.0;
uniform float grid_width: hint_range(0.001, 1.0) = 0.03;
uniform float grid_smoothness: hint_range(0.001, 1.0) = 1.0;
uniform bool grid_x = true;
uniform bool grid_y = false;
uniform bool grid_z = true;
uniform vec4 grid_x_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 grid_y_color: hint_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 grid_z_color: hint_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 base_color: hint_color = vec4(1.0);

varying vec3 world_position;

void vertex() {
    world_position = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

void fragment() {
    vec3 m = vec3(mod(world_position.x, grid_step), mod(world_position.y, grid_step), mod(world_position.z, grid_step));
    vec3 dist = vec3(min(m.x, abs(grid_step - m.x)), min(m.y, abs(grid_step - m.y)), min(m.z, abs(grid_step - m.z)));
    float gw = grid_width * 0.5;
    bool gx = grid_x && dist.x <= gw;
    bool gy = grid_y && dist.y <= gw;
    bool gz = grid_z && dist.z <= gw;
    if (gx||gy||gz) {
        float cx = gx ? smoothstep(1.0, 1.0 - grid_smoothness, dist.x / gw) : 0.0;
        float cy = gy ? smoothstep(1.0, 1.0 - grid_smoothness, dist.y / gw) : 0.0;
        float cz = gz ? smoothstep(1.0, 1.0 - grid_smoothness, dist.z / gw) : 0.0;
        vec3 c = cx * grid_x_color.rgb * grid_x_color.a + cy * grid_y_color.rgb * grid_y_color.a + cz * grid_z_color.rgb * grid_z_color.a;
        ALBEDO *= 1.0 - max(cz, max(cx, cy));
        EMISSION += c;
    } else {
        ALBEDO = base_color.rgb;
    }
}"
